# ============================================================
# 【概要】
# OpenAI Chat Completion API（Python SDK v1）を使い、
# 料理名を入力すると ChatGPT から「一人前レシピ」を
# 日本語 & JSON 形式で取得する関数 generate_recipe() を定義。
# スクリプト末尾で「カレー」のレシピを実際に生成し、
# コンソールへ出力する最小サンプルです。
# ============================================================

# 1) 必要ライブラリを読み込み ---------------------------------
from openai import OpenAI  # ← OpenAI SDK のクライアントクラス

# 2) クライアント生成 -----------------------------------------
#    - OPENAI_API_KEY が環境変数に入っていれば自動で認証される
client = OpenAI()


# -------------------------------------------------------------
# 関数 : generate_recipe
# 目的 : dish（料理名）を渡し、ChatGPT にレシピ生成を依頼して返す
# 引数 : dish (str)  … 例 "カレー"
# 戻値 : ChatGPT 応答テキスト（JSON 形式のレシピ）
# -------------------------------------------------------------
def generate_recipe(dish: str) -> str:
    # ChatGPT へリクエスト ------------------------------
    response = client.chat.completions.create(
        model="gpt-4.1-nano",  # 軽量・高速・低コストモデル
        messages=[  # 会話履歴を system → user の順で渡す
            {
                "role": "system",
                "content": (
                    "ユーザーが入力した料理名に対して、以下の条件でレシピを作成してください：\n"
                    "- 日本語で出力すること\n"
                    "- 分量は一人前で記載すること\n"
                    "出力形式は以下の JSON 形式にしてください：\n"
                    "'材料':['材料1','材料2']\n"
                    "'手順':['手順1','手順2']"
                ),
            },
            {
                "role": "user",
                "content": f"{dish}",  # 料理名をそのまま渡す
            },
        ],
        # temperature / max_tokens などは既定値を使用
    )

    # ChatGPT の最初の回答候補を取り出し、本文だけ返す ------------
    return response.choices[0].message.content


# ---------------- テスト呼び出し -----------------------------
# 「カレー」のレシピを生成して表示する例
recipe = generate_recipe("カレー")
print(recipe)
