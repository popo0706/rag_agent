# ==============================================================
# 【概要】
# このスクリプトは LangChain を使って
#   ① ユーザが入力した料理名（dish）を受け取り
#   ② GPT-4.1-nano にレシピ案を考えさせ
#   ③ 結果を「ただの文字列」として受け取って表示する
# という一連の流れを “パイプ” でつないだ最小サンプルです。
# ポイントは次の３つだけ！
#   1. **prompt**  : 会話のひな型（テンプレート）
#   2. **model**   : 実際に考えてくれる LLM
#   3. **StrOutputParser** : 返ってきたメッセージから
#                            文章本体だけを取り出す便利屋
# 中学生でも読めるように、むずかしい単語には（かんたん説明）を
# 付けています。コード部分は一切改変していませんので
# そのままコピー＆ペーストして動かせます。
# ==============================================================


# ------------------------------------------------------------
#  必要なライブラリを読み込む
# ------------------------------------------------------------
from langchain_core.output_parsers import (
    StrOutputParser,  # ← AIMessage → str に変換する軽量パーサ
)
from langchain_core.prompts import (
    ChatPromptTemplate,  # ← ChatGPT 形式のテンプレート作成クラス
)
from langchain_openai import (
    ChatOpenAI,  # ← OpenAI Chat モデルのラッパークラス
)

# ──────────────────────────────────────────────
# ① プロンプト（会話テンプレート）を作る
#    - system 役 : AI へのおおまかな指示
#    - human 役  : ユーザが入力する部分
#    {dish} というカギかっこは「ここに実際の料理名が入るよ」
# ──────────────────────────────────────────────
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "ユーザが入力したレシピを考えてください。",
        ),
        ("human", "{dish}"),
    ]
)

# ──────────────────────────────────────────────
# ② LLM を初期化
#    - model       : gpt-4.1-nano（軽量で速い）
#    - temperature : 0（ランダム性ゼロ＝毎回同じ答え）
# ──────────────────────────────────────────────
model = ChatOpenAI(model="gpt-4.1-nano", temperature=0)


# ------------------------------------------------------------
# ③ パイプでつなぎ「チェーン」を完成させる
#    prompt  →   model   →   StrOutputParser
#    （質問）     （回答）      （文字列だけ残す）
# ------------------------------------------------------------
chain = prompt | model | StrOutputParser()

# ------------------------------------------------------------
# ④ チェーンを実行する
#    invoke() に {"dish": "カレー"} を渡すと
#    {dish} が "カレー" に置き換わった状態で LLM を呼び出す。
#    返り値は **ただの文字列**（str 型）なのでそのまま使える。
# ------------------------------------------------------------
output = chain.invoke({"dish": "カレー"})

# ------------------------------------------------------------
# ⑤ 結果を表示する
# ------------------------------------------------------------
print(output)  # ← コンソールにレシピ案がそのまま表示される！
