# ================================================================
# 【概要】
# Chat Completion API を “ストリーミング” モードで呼び出し、
# モデルが文章を生成するたびにリアルタイムで受信・表示するサンプル。
# ───────────────────────────────────────────
# 1. `stream=True` を指定すると、レスポンスが “チャンク” 単位で届く
#    （＝トークンが生成されるたびに for ループが回る）
# 2. 受け取ったチャンクの `choices[0].delta.content` を取り出して
#    コンソールへ即時表示することで “文字が流れる” 体験を実現
# 3. ストリーミング時は `response.usage` が付かない点に注意
# ================================================================

from openai import OpenAI  # v1 系で追加されたクライアントクラス

client = OpenAI()  # OpenAI API の窓口を生成
# （API キーは環境変数 OPENAI_API_KEY から自動読込）

# ──────────────────────────────────────────────────────────────
# ChatGPT (OpenAI Chat Completion API) に「ストリーミング」で質問し、
# 返事を “リアルタイム” に表示するサンプル
# ──────────────────────────────────────────────────────────────
#  ⚙️ stream=True とは？
#       - 出力が長いとき、全部そろうまで待たず “一部分ずつ” 届くモード。
#       - チャットUI のように「しゃべりながら文字が増える」体験を実現できる。
#       - トークンが来るたびに for ループが回るイメージ。
#
#  ⚠️ ストリーミング時は `response.usage` が付かないので
#     トークン数を数えたい場合は自力でカウントする or 再度 non-stream で呼ぶ。
# ──────────────────────────────────────────────────────────────

response = client.chat.completions.create(
    model="gpt-4.1-nano",  # ← 使用モデル名（ユーザー環境で利用できる lightweight 版）
    # ▼ 会話履歴（時系列順に並べる）
    messages=[
        {
            "role": "system",
            "content": "You are a helpful assistant.",
            # ↑ AI の設定。「親切なアシスタント」として振る舞ってね、と指示。
        },
        {
            "role": "user",
            "content": "こんにちは！私はイスミといいます！",
            # ↑ ユーザーの発言。ここまでが「入力（prompt）」扱い。
        },
    ],
    stream=True,  # ← ★ これがストリーミングのスイッチ！
    #    True にすると “チャンク” 単位でレスポンスが届く。
)

# ▼ ストリーミング受信：for ループで「チャンク」を順番に処理
for chunk in response:
    # chunk は <OpenAIObject> で、choices リストの 0 番目に
    # “どのトークンが新しく来たか？” が入っている。
    delta = chunk.choices[0].delta  # ← 変更（増分）を表す小さなオブジェクト
    content = delta.content  # ← 新しく到着した “文字列のかけら”

    # delta.role や delta.function_call など他のフィールドが来ることもある。
    # ここでは「本文が追加されたとき」だけを表示したいので None チェック。
    if content is not None:
        # end="" で改行せず “つなげて” 出力、flush=True でバッファを即時フラッシュ
        # これによりコンソール上で文字がリアルタイムに伸びていく。
        print(content, end="", flush=True)

        # （任意）ログに timestamp を付けたり、
        #           GUI のテキストエリアへ追記することもできる。
# ループが終わったところで改行を入れたい場合は print() を別途呼ぶ。
