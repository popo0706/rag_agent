# ===============================================================
# 【要約】
# このスクリプトは OpenAI の Chat Completions API をゼロショット・
# プロンプティングで呼び出し、与えられた 1 文の感情を
# 「ポジティブ／ネガティブ／中立」の 3 つに分類して
# 標準出力に表示する最小サンプルです。
# ===============================================================

# ===============================================================
# 【概要】
# 「ゼロショット・プロンプティング」で
# 文章の感情（ポジティブ／ネガティブ／中立）を判定する
# 最小サンプルです。
# ---------------------------------------------------------------
# ● “ゼロショット” とは
#     モデルに具体例（Few-Shot の “ショット”）を与えない状態で
#     いきなりタスクを依頼する手法。
# ● なぜ可能？
#     ChatGPT などの LLM は大量データで事前学習済みなので
#     明示的なお手本がなくても推論できる。
# ● このコードの流れ
#   ① system メッセージで「感情分類タスク」を指示
#   ② user メッセージに判定対象文を渡す
#   ③ レスポンスから分類結果を取り出し表示
# ===============================================================

# （前提）OpenAI クライアント `client` は別ファイルで生成済み
#          例: from config import client などでインポートしている想定
#          本サンプルでは学習用にその場で生成している。

# --------------------------------------------------------------
# Chat Completions API を呼び出し、LLM に感情分類を依頼
# --------------------------------------------------------------

from openai import OpenAI  # ← OpenAI SDK のクライアントクラスをインポート

client = OpenAI()  # ← 環境変数 OPENAI_API_KEY を読み取り、クライアントを生成

response = client.chat.completions.create(  # ← 感情分類タスクを実行
    model="gpt-4.1-nano",  # ← 軽量・高速な GPT-4.1 系モデルを指定
    messages=[  # ← 会話履歴（ロール付きメッセージ）を時系列で渡す
        {
            "role": "system",  # ★AI への “指示書” を渡すロール
            "content": (
                "入力内容をポジティブ・ネガティブ・中立のどれかに分類してください。"
            ),
            # ↑ モデルに「感情分類タスク」を依頼。
            #   *ポイント*: 具体例ゼロでも、タスク内容を明示すれば
            #               ゼロショットで推論できる。
        },
        {
            "role": "user",  # ★実際に分類してほしいテキストを渡すロール
            "content": ("chatgptはプログラミングの悩み事をたくさん解決してくれる。"),
            # ↑ ポジティブ寄りの文章例。LLM が “ポジティブ” と判定するはず。
        },
    ],
)

# --------------------------------------------------------------
# 返答を取り出して表示
# --------------------------------------------------------------
# response.choices は応答候補の配列（temperature 設定により複数可）
classification = response.choices[0].message.content  # ← 判定結果（文字列）を取得
print(classification)  # ← 例: 「ポジティブ」と出力される想定
