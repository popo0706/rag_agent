"""
【概要】
GitHub 上の LangChain リポジトリをクローンし、拡張子 .mdx のドキュメントだけを
LangChain の `GitLoader` で読み込む最小サンプルです。

処理の流れは次の 4 ステップ:
 1) **フィルタ関数 `file_filter`** を用意して、読み込む対象を .mdx ファイルに限定。
 2) **`GitLoader` を初期化** し、どのリポジトリ／ブランチ／ローカルパスを使うか設定。
 3) **`load()` を実行** すると、クローン（または更新）→ ファイル走査 → フィルタ適用 → ドキュメント生成。
 4) **読み込んだ件数を `print`** して動作確認。

このスクリプトを実行すると、カレントフォルダ直下に `./langchain` というローカルリポジトリ
フォルダが作成（もしくは更新）され、その中から `.mdx` ファイルのみが読み込まれます。
"""

from langchain_community.document_loaders import (
    GitLoader,
)  # ← Git リポジトリからドキュメントを読み込むユーティリティ

# ------------------------------------------------------------
# ① 対象ファイルを絞り込むためのフィルタ関数を定義
#    GitLoader はリポジトリ内の各ファイルパスをこの関数に渡し、
#    True が返ったファイルだけをドキュメントとして読み込みます。
# ------------------------------------------------------------


def file_filter(
    file_path: str,
) -> bool:  # ← 文字列型(file_path)を受け取り、結果を真偽値で返す
    """拡張子が .mdx のファイルだけを通すフィルタ関数"""
    return file_path.endswith(
        ".mdx"
    )  # ← .mdx で終わるファイルなら True、それ以外は False


# ------------------------------------------------------------
# ② GitLoader を初期化
#    - clone_url : クローン元となる GitHub リポジトリ URL
#    - repo_path : ローカルにクローンするフォルダパス（すでに存在すれば pull 更新）
#    - branch    : 参照するブランチ名（ここでは master）
#    - file_filter : 先ほど定義したフィルタ関数
# ------------------------------------------------------------

loder = GitLoader(  # ← GitLoader インスタンスを生成（※変数名は元コードを尊重してあえて typo のまま）
    clone_url="http://github.com/langchain-ai/langchain",  # ← LangChain 本家リポジトリ
    repo_path="./langchain",  # ← クローン先ディレクトリ（既存なら差分だけ pull）
    branch="master",  # ← master ブランチを対象
    file_filter=file_filter,  # ← .mdx だけ読み込む
)

# ------------------------------------------------------------
# ③ ドキュメントの読み込みを実行
#    load() が以下の一連の処理を行います。
#      1) リポジトリの clone または pull
#      2) 全ファイルを走査して file_filter で絞り込み
#      3) 対象ファイルを LangChain Document 型に変換
# ------------------------------------------------------------

raw_docs = loder.load()  # ← 結果は List[Document] として返る

# ------------------------------------------------------------
# ④ 読み込んだドキュメントの件数を表示
# ------------------------------------------------------------

print(len(raw_docs))  # ← 取得できたドキュメント数を標準出力に表示
