# ================================================================
# 【概要】
# Chat Completion API を用いて、モデルに
# 「文章に登場する人物名を JSON 形式で返して！」とお願いするサンプル。
# ----------------------------------------------------------------
# 1. system メッセージで “最終成果物の JSON 例” を提示し、構造を固定する
# 2. response_format={"type": "json_object"} で説明文を排除し、
#    純粋な JSON だけを返させる
# 3. 最後に response.choices[0].message.content を取り出せば
#    そのまま JSON 文字列として利用可能
# ================================================================

from openai import OpenAI  # v1 系で追加されたクライアントクラス

client = OpenAI()  # OpenAI API の窓口を生成（API キーは環境変数から自動読込）

# ───────────────────────────────────────────────────────────
# ChatGPT に “人物の一覧を JSON で返して” と依頼する
# ───────────────────────────────────────────────────────────
response = client.chat.completions.create(
    model="gpt-4.1-nano",  # ← 使用モデル（軽量モデルを想定）
    # ▼ 会話履歴（messages）は「system → user」の順に並べる
    messages=[
        {
            "role": "system",
            "content": (
                # ▼ モデルに「最終的にこう出してね」と具体例を示す
                "人物一覧を次の JSON 形式で出力してください。\n"
                '{"people":["aaa","bbb"]}'
                #   people というキーに名前の配列を入れる形を例示
            ),
        },
        {
            # ▼ ユーザー発話：人物が含まれる文章を渡す
            "role": "user",
            "content": "昔あるところにおじいさんとおばあさん、孫があそんでいました。",
        },
    ],
    # ▼ ここが重要：説明文なしで “純粋な JSON オブジェクト” を要求
    response_format={"type": "json_object"},
)

# ───────────────────────────────────────────────────────────
# 返ってきた JSON 文字列を取り出して表示
#   - そのまま print すれば JSON 形式の文字列として見える
#   - 必要に応じて json.loads() で辞書に変換すると便利
# ───────────────────────────────────────────────────────────
print(response.choices[0].message.content)
# 期待例: {"people": ["おじいさん", "おばあさん", "孫"]}
