# ============================================================
# 【概要】
# このスクリプトは ChatGPT API（OpenAI Python SDK v1）を使って、
# ユーザーが入力した料理名に対するレシピを “日本語・一人前” で
# 取得する関数 generate_recipe(dish) を定義し、実際に
# 「カレー」のレシピを取得して表示する最小サンプルです。
#   1. システムプロンプトで出力フォーマットを固定
#   2. ユーザープロンプトに料理名を渡す
#   3. 返ってきたレシピ文字列をそのまま返却
# ============================================================

from openai import OpenAI  # OpenAI クライアントクラスをインポート

client = OpenAI()  # クライアント生成（API キーは環境変数から自動取得）


# ---------------------------------------------
# 関数名 : generate_recipe
# 目的   : 料理名を渡して ChatGPT からレシピを取得
# 引数   : dish (str) … 料理名（例: "カレー"）
# 戻り値 : ChatGPT が生成したレシピ（str）
# ---------------------------------------------
def generate_recipe(dish: str) -> str:
    # ChatGPT へレシピ生成を依頼する
    response = client.chat.completions.create(
        model="gpt-4.1-nano",  # 軽量・低コストの GPT-4.1 系モデル
        messages=[
            {
                "role": "system",
                "content": (
                    "ユーザーが入力した料理名に対して、以下の条件でレシピを作成してください：\n"
                    "- 日本語で出力すること\n"
                    "- 【材料】と【手順】に分けて箇条書きで記載すること\n"
                    "- 分量は一人前で記載すること"
                ),  # ← 出力形式を厳密に指示するシステムプロンプト
            },
            {
                "role": "user",
                "content": f"{dish}",  # ユーザーが知りたい料理名を渡す
            },
        ],
    )
    # ChatGPT の回答本文だけを取り出して呼び出し元へ返す
    return response.choices[0].message.content


# ▼ 関数を呼び出して「カレー」のレシピを取得
recipe = generate_recipe("カレー")

# ▼ 取得したレシピをコンソールへ表示
print(recipe)
