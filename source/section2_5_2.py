# ================================================================
# 【概要】
# OpenAI Python SDK（v1系）を使って ChatGPT に
# 「会話の続きを考えて！」と依頼し、返答を受け取る最小サンプル。
# ───────────────────────────────────────────────
# 1. `OpenAI` クライアントを生成（環境変数 OPENAI_API_KEY が必要）
# 2. `messages` に会話履歴（role / content のリスト）を渡す
# 3. `client.chat.completions.create()` で応答を取得
# 4. `response.to_json(indent=2)` で内容を確認
# ================================================================

from openai import OpenAI  # v1 系で追加されたクライアントクラス

client = OpenAI()  # OpenAI API の窓口を生成（API キーは環境変数から自動読込）

# ──────────────────────────────────────────────────────────────
# ChatGPT（OpenAI Chat Completion API）に「会話の続きを作って！」
# とリクエストし、その返事を受け取る最小構成の例
# ──────────────────────────────────────────────────────────────

# ▼ 返答が入る変数 `response` に、API からの結果オブジェクトを格納
response = client.chat.completions.create(  # ← “chat completions” エンドポイントを叩く
    model="gpt-4.1-nano",  # ← 利用するモデル名（ユーザー環境で利用可）
    # messages : これまでの会話履歴を「時系列順」に並べるリスト
    # ──────────────────────────────────────────────
    #  各要素は dict で  ➜ {"role": "◯◯", "content": "発言内容"}
    #    role の代表例
    #      • "system"     : AI へのルール・背景設定を伝える（舞台装置）
    #      • "user"       : 人間の発言
    #      • "assistant"  : AI の過去の返答（文脈保持に使う）
    #  ✅ **最後に置いた "user" 発言に対して** モデルが続きを返してくる。
    messages=[
        # ① システムメッセージ  — AI の人格や行動指針を指定
        {"role": "system", "content": "You are a helpful assistant."},
        # ② ユーザーの最初の発言  — 挨拶＆自己紹介
        {"role": "user", "content": "こんにちは！私はイスミといいます！"},
        # ③ AI の返答（過去ログとして手動で入れておく）
        {
            "role": "assistant",
            "content": "こんにちは、イスミさん！お会いできて嬉しいです。今日はどんなことをお話ししましょうか？",
        },
        # ④ ユーザーの追加リクエスト  — ニックネームを考えてほしい
        {"role": "user", "content": "私のニックネームを考えてください？"},
    ],
    # ※ ここに max_tokens / temperature などオプションを追加すると
    #    出力長さ・ランダム性などの挙動を細かく調整できる
)

# ──────────────────────────────────────────────────────────────
# レスポンスを確認する
# `response` は SDK 独自オブジェクト ➜ to_json() で辞書化すると読みやすい
#    indent=2 : JSON をインデント 2 スペースで階層表示
# もっとシンプルに “AI の本文だけ” 欲しい場合は
#    response.choices[0].message.content
# で OK（choices[0] が 1つ目の候補、通常はここに返答が入る）
# ──────────────────────────────────────────────────────────────
print(response.to_json(indent=2))
