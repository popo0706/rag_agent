# ============================================================
# 【概要】
# OpenAI Python SDK (v1 系) を用いた「最小構成」のチャット実行例です。
# ───────────────────────────────────────────
# 1. `OpenAI` クライアントを生成（環境変数 OPENAI_API_KEY が必要）
# 2. ChatGPT へ送るメッセージ履歴（role / content のリスト）を準備
# 3. `client.chat.completions.create()` で回答を取得
# 4. 戻り値 `response` を JSON 形式で見やすく表示
# ============================================================

from openai import OpenAI  # v1 系で追加されたクライアントクラス

client = OpenAI()  # OpenAI API の窓口を生成（API キーは環境変数から自動読込）

# ──────────────────────────────────────────────────────────────
# チャット形式で AI（ChatGPT） に質問 → 返答をもらう最小構成サンプル
# ──────────────────────────────────────────────────────────────

# すでに client = OpenAI() を作ってある前提で進みます
# （client には環境変数 OPENAI_API_KEY が自動的に紐づく）

# ChatGPT に渡すメッセージは “会話の履歴” を表すリスト形式。
# 各要素は「だれが・何を言ったか？」を示す辞書（role / content）のペアです。
# ------------------------------------------------------------------
#   role の主な種類
#   ───────────────────────────
#     • "system" : “舞台設定” や “ルール” を AI に伝える
#     • "user"   : 人間（質問者）が実際に入力した文
#     • "assistant" : 過去の AI の応答を履歴として残すときに使う
# ------------------------------------------------------------------
# 今回はシンプルに「system + user」の2発言だけを渡します。
response = client.chat.completions.create(
    model="gpt-4.1-nano",  # ← 利用したいモデル名（ユーザー環境で利用可能と事前に確認済み）
    #    *ポイント* ここを変えると性能／料金／制限が変わる
    messages=[  # ← 会話履歴を“リスト”でまとめて渡す
        {
            "role": "system",
            "content": "You are a helpful assistant.",
            # ↑ AI への“指示書”。この例では「親切なアシスタントになってね」と伝えている。
            #   *重要* 文脈やトーンを決めるので、長いプロンプトをここに書くことが多い。
        },
        {
            "role": "user",
            "content": "こんにちは！私はイスミといいます！",
            # ↑ ユーザーの実際の発話。「こんにちは〜」と自己紹介している状況。
        },
        # もし過去の assistant 応答を文脈として渡したい場合はここに
        # {"role": "assistant", "content": "・・・"} を追加していくイメージ。
    ],
    # ⚠️ 補足：他にも max_tokens や temperature など細かなパラメータを
    #           キーワード引数で追加指定できる。今回はデフォルトに任せています。
)

# 返ってきた response は OpenAI SDK 専用のオブジェクト。
# そのままだと中身がわかりにくいので、to_json() で “辞書” に変換し、
# indent=2 を指定して「読みやすい形」で印字します。
print(response.to_json(indent=2))
#   - indent=2 : インデント幅を2スペースにして階層構造を整える
#   - ChatGPT の応答は response["choices"][0]["message"]["content"] に入っているので
#     「実際に本文だけ欲しいとき」は
#        print(response.choices[0].message.content)
#     のように書いても OK。
