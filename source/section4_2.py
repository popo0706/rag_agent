# ===============================================================
# 【要約】
# LangChain の “ChatPromptTemplate” と “MessagesPlaceholder” を使い、
# 既存のチャット履歴（chat_history）を差し込んだうえで
# 新しいユーザー入力 {input} を追加し、最終的なプロンプト
# （ChatPromptValue 型）を生成・確認するサンプルです。
# ===============================================================


# ------------------------------------------------------------------
# 1) 必要なクラスをインポート
# ------------------------------------------------------------------
# ❶ AI と人間が交わすメッセージの「型」を読み込む
#    - AIMessage   : AI が返すメッセージを表すクラス
#    - HumanMessage: 人間が送るメッセージを表すクラス
from langchain_core.messages import AIMessage, HumanMessage

# ❷ 「プロンプト＝AI への質問文」のテンプレートを扱うクラス
#    - ChatPromptTemplate : チャット形式のテンプレートを作成できる
#    - MessagesPlaceholder: 会話履歴を“差し込み口”として定義できる
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder


# ------------------------------------------------------------------
# 2) 会話テンプレート（プロンプト）を定義
# ------------------------------------------------------------------
# ChatPromptTemplate.from_messages() に
# 「system → 履歴 → human」の順でメッセージ構造を並べる。
prompt = ChatPromptTemplate.from_messages(
    [
        # --- (a) system メッセージ -----------------------------------
        # モデル全体への指示やキャラクター設定を書く。
        # ここでは「あなたは親切なアシスタントです」と宣言。
        ("system", "You are a helpful assistant."),
        # --- (b) メッセージ履歴の差し込み口 -------------------------
        # MessagesPlaceholder("chat_history") で
        # “ここに過去チャットを丸ごと入れるよ” と指定。
        # optional=True なので、履歴が無い場合は空でも動く。
        MessagesPlaceholder("chat_history", optional=True),
        # --- (c) human メッセージ -----------------------------------
        # 最後に「今回ユーザーが入力したメッセージ」を渡す枠を用意。
        # {input} が後で実際の文字列に置き換わる。
        ("human", "{input}"),
    ]
)


# ------------------------------------------------------------------
# 3) テンプレートに具体的な値を埋め込んで
#    “完成したプロンプト” (prompt_value) を作る
# ------------------------------------------------------------------
prompt_value = prompt.invoke(
    {
        # ---- (b) に対応：会話履歴をリストで渡す --------------------
        "chat_history": [
            # 人間側の最初の発言
            HumanMessage(content="こんにちは！私はジョンと言います！"),
            # それに対する AI の返事
            AIMessage(content="こんにちは！ジョンさん！どのようにお手伝いできますか？"),
        ],
        # ---- (c) に対応：今回のユーザー入力 -------------------------
        "input": "私の名前がわかりますか？",
    }
)


# ------------------------------------------------------------------
# 4) 生成されたプロンプト（AI に送るメッセージ列）を表示
# ------------------------------------------------------------------
# ChatPromptValue 型は stringify すると “ChatPromptValue(messages=[...])”
# のような形で、内部のメッセージリストが確認できる。
print(prompt_value)
